<?php
/**
 * @file
 * CKAN requires to validate session data, for a SSO.
 * Drupal will register new users to CKAN on login.
 */

/**
 * Implements hook_user_login().
 *
 * @see http://docs.ckan.org/en/latest/api.html#ckan.logic.action.update.user_update
 * @see http://docs.ckan.org/en/latest/api.html#ckan.logic.action.create.user_create
 */
function odaa_user_user_login(&$edit, $account) {
  // First lets check if the user is created.
  $user = _odaa_user_get_ckan_find_user($account->name);
  $options = array(
    'email' => $account->mail,
    'password' => md5(uniqid()),
  );

  if ($user != FALSE) {
    // User exist in CKAN, update.
    $options['id'] = strtolower($account->name);
    $data = _odaa_user_api_call('/user_update', $options);
    if (!$data) {
      watchdog('odaa_user', 'User update call failed for user: %name', array('%name' => $account->name), WATCHDOG_ERROR);
    }
  }
  else {
    // User does not exists in CKAN, lets create one.
    $options['name'] = strtolower($account->name);
    $data = _odaa_user_api_call('/user_create', $options);
    if (!$data) {
      watchdog('odaa_user', 'User create call failed for user: %name', array('%name' => $account->name), WATCHDOG_ERROR);
    }
  }

  // Save API key from CKAN.
  if (!empty($data->apikey)) {
    $account->field_ckan_api_key['und'][0]['value'] = $data->apikey;
  }

  // Save user account.
  user_save($account);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function odaa_user_form_user_register_form_alter(&$form, $form_state) {
  $form['#validate'][] = 'odaa_user_register_form_validate';
}

/**
 * Validate function for user registration.
 *
 * Check if username contains uppercase letters.
 */
function odaa_user_register_form_validate($form, &$form_state) {
  if (preg_match('/[A-Z]/', $form_state['values']['name'])) {
    form_set_error('name', t('Username must be in lowercase'));
  }
}

/**
 * Implements hook_menu().
 */
function odaa_user_menu() {
  $items = array();

  $items['odaa_user/%'] = array(
    'title' => 'Validate session',
    'page callback' => '_odaa_user_validate_session',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  // Admin page.
  $items['admin/config/system/odaa'] = array(
    'title' => 'Odaa',
    'description' => 'Odaa CKAN configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('odaa_user_admin'),
    'access arguments' => array('administer odaa'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function odaa_user_permission() {
  return array(
    'administer odaa' => array(
      'title' => t('Administer ODAA'),
      'description' => t('Perform administration tasks for ODAA.'),
    ),
  );
}

/**
 * Administrative configuration form.
 *
 * @return array
 *   System Settings Form.
 */
function odaa_user_admin() {
  $form = array();

  $form['odaa_user_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('API key'),
    '#default_value' => variable_get('odaa_user_api_key', ''),
    '#required' => TRUE,
  );

  $form['odaa_user_ckan_url'] = array(
    '#type' => 'textfield',
    '#title' => t('CKAN URL'),
    '#default_value' => variable_get('odaa_user_ckan_url', ''),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Convert session id to user id.
 *
 * @param string $session_id
 *   Drupal session id
 *
 * @return mixed
 *   JSON Drupal user id
 */
function _odaa_user_validate_session($session_id) {
  $uid = db_select('sessions', 's')
    ->fields('s', array('uid'))
    ->condition('sid', $session_id)
    ->execute()
    ->fetchField();

  if ($uid) {
    $account = user_load($uid);

    if ($account->status) {
      drupal_json_output(array('username' => $account->name));
      exit();
    }
  }
  drupal_json_output(array('status' => FALSE));
}

/**
 * Internal function for API calls to CKAN.
 *
 * @param string $call
 *   The request URL
 * @param array $data
 *   Array containing options.
 *
 * @return mixed
 *   FALSE if no data or CKAN data array.
 */
function _odaa_user_api_call($call, $data = array()) {
  $api_key = variable_get('odaa_user_api_key', '');

  $options = array(
    'headers' => array(
      'Content-Type' => 'application/json',
      'Accept' => 'application/json',
      'X-CKAN-API-Key' => $api_key,
    ),
    'method' => 'POST',
    'timeout' => 15,
  );

  if (!empty($data)) {
    // Inserting post data.
    $options['data'] = json_encode($data);
  }

  $url = variable_get('odaa_user_ckan_url', '');
  $output = drupal_http_request($url . $call, $options);

  // Verify that the request returned correct.
  if ($output->code == 200) {
    // Verify that the data is JSON.
    if (($data = json_decode($output->data)) !== FALSE) {
      // Data is JSON.
      if ($data->success == 1) {
        // Successful request.
        return $data->result;
      }
    }
  }

  // Log errors.
  watchdog('odaa_user', check_plain($output->error), array(), WATCHDOG_ERROR);

  return FALSE;
}

/**
 * Internal function to check if username exists in CKAN.
 *
 * @param string $username
 *   The username to find.
 *
 * @return mixed
 *   FALSE if username not found or CKAN data with user array.
 *
 * @see http://docs.ckan.org/en/latest/api.html#ckan.logic.action.get.user_list
 */
function _odaa_user_get_ckan_find_user($username) {
  // Get user_list.
  $users = _odaa_user_api_call('/user_list');
  foreach ($users as $user) {
    if ($user->name == $username) {
      // User found.
      return $user;
    }
  }

  return FALSE;
}
